/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.basis.hackathon.domain.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NoiseSensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 882341158892384003L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NoiseSensor\",\"namespace\":\"br.com.basis.hackathon.domain.avro\",\"fields\":[{\"name\":\"requesttime\",\"type\":{\"type\":\"long\",\"format_as_time\":\"unix_long\",\"arg.properties\":{\"iteration\":{\"start\":1,\"step\":10}}}},{\"name\":\"latitude\",\"type\":{\"type\":\"double\",\"arg.properties\":{\"range\":{\"min\":-16.0,\"max\":-15.8}}}},{\"name\":\"longitude\",\"type\":{\"type\":\"double\",\"arg.properties\":{\"range\":{\"min\":-46.2,\"max\":-46.0}}}},{\"name\":\"frequency\",\"type\":{\"type\":\"long\",\"arg.properties\":{\"range\":{\"min\":20,\"max\":20000}}}},{\"name\":\"volume\",\"type\":{\"type\":\"long\",\"arg.properties\":{\"range\":{\"min\":33,\"max\":121}}}},{\"name\":\"sensor\",\"type\":{\"type\":\"long\",\"arg.properties\":{\"range\":{\"min\":1,\"max\":20}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NoiseSensor> ENCODER =
      new BinaryMessageEncoder<NoiseSensor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NoiseSensor> DECODER =
      new BinaryMessageDecoder<NoiseSensor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<NoiseSensor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NoiseSensor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NoiseSensor>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this NoiseSensor to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a NoiseSensor from a ByteBuffer. */
  public static NoiseSensor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long requesttime;
  @Deprecated public double latitude;
  @Deprecated public double longitude;
  @Deprecated public long frequency;
  @Deprecated public long volume;
  @Deprecated public long sensor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NoiseSensor() {}

  /**
   * All-args constructor.
   * @param requesttime The new value for requesttime
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   * @param frequency The new value for frequency
   * @param volume The new value for volume
   * @param sensor The new value for sensor
   */
  public NoiseSensor(java.lang.Long requesttime, java.lang.Double latitude, java.lang.Double longitude, java.lang.Long frequency, java.lang.Long volume, java.lang.Long sensor) {
    this.requesttime = requesttime;
    this.latitude = latitude;
    this.longitude = longitude;
    this.frequency = frequency;
    this.volume = volume;
    this.sensor = sensor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requesttime;
    case 1: return latitude;
    case 2: return longitude;
    case 3: return frequency;
    case 4: return volume;
    case 5: return sensor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requesttime = (java.lang.Long)value$; break;
    case 1: latitude = (java.lang.Double)value$; break;
    case 2: longitude = (java.lang.Double)value$; break;
    case 3: frequency = (java.lang.Long)value$; break;
    case 4: volume = (java.lang.Long)value$; break;
    case 5: sensor = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'requesttime' field.
   * @return The value of the 'requesttime' field.
   */
  public java.lang.Long getRequesttime() {
    return requesttime;
  }

  /**
   * Sets the value of the 'requesttime' field.
   * @param value the value to set.
   */
  public void setRequesttime(java.lang.Long value) {
    this.requesttime = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.Double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.Double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The value of the 'frequency' field.
   */
  public java.lang.Long getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(java.lang.Long value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public java.lang.Long getVolume() {
    return volume;
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.lang.Long value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'sensor' field.
   * @return The value of the 'sensor' field.
   */
  public java.lang.Long getSensor() {
    return sensor;
  }

  /**
   * Sets the value of the 'sensor' field.
   * @param value the value to set.
   */
  public void setSensor(java.lang.Long value) {
    this.sensor = value;
  }

  /**
   * Creates a new NoiseSensor RecordBuilder.
   * @return A new NoiseSensor RecordBuilder
   */
  public static br.com.basis.hackathon.domain.avro.NoiseSensor.Builder newBuilder() {
    return new br.com.basis.hackathon.domain.avro.NoiseSensor.Builder();
  }

  /**
   * Creates a new NoiseSensor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NoiseSensor RecordBuilder
   */
  public static br.com.basis.hackathon.domain.avro.NoiseSensor.Builder newBuilder(br.com.basis.hackathon.domain.avro.NoiseSensor.Builder other) {
    return new br.com.basis.hackathon.domain.avro.NoiseSensor.Builder(other);
  }

  /**
   * Creates a new NoiseSensor RecordBuilder by copying an existing NoiseSensor instance.
   * @param other The existing instance to copy.
   * @return A new NoiseSensor RecordBuilder
   */
  public static br.com.basis.hackathon.domain.avro.NoiseSensor.Builder newBuilder(br.com.basis.hackathon.domain.avro.NoiseSensor other) {
    return new br.com.basis.hackathon.domain.avro.NoiseSensor.Builder(other);
  }

  /**
   * RecordBuilder for NoiseSensor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NoiseSensor>
    implements org.apache.avro.data.RecordBuilder<NoiseSensor> {

    private long requesttime;
    private double latitude;
    private double longitude;
    private long frequency;
    private long volume;
    private long sensor;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.basis.hackathon.domain.avro.NoiseSensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requesttime)) {
        this.requesttime = data().deepCopy(fields()[0].schema(), other.requesttime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.frequency)) {
        this.frequency = data().deepCopy(fields()[3].schema(), other.frequency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sensor)) {
        this.sensor = data().deepCopy(fields()[5].schema(), other.sensor);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NoiseSensor instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.basis.hackathon.domain.avro.NoiseSensor other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.requesttime)) {
        this.requesttime = data().deepCopy(fields()[0].schema(), other.requesttime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.latitude)) {
        this.latitude = data().deepCopy(fields()[1].schema(), other.latitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.longitude)) {
        this.longitude = data().deepCopy(fields()[2].schema(), other.longitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.frequency)) {
        this.frequency = data().deepCopy(fields()[3].schema(), other.frequency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sensor)) {
        this.sensor = data().deepCopy(fields()[5].schema(), other.sensor);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'requesttime' field.
      * @return The value.
      */
    public java.lang.Long getRequesttime() {
      return requesttime;
    }

    /**
      * Sets the value of the 'requesttime' field.
      * @param value The value of 'requesttime'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setRequesttime(long value) {
      validate(fields()[0], value);
      this.requesttime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requesttime' field has been set.
      * @return True if the 'requesttime' field has been set, false otherwise.
      */
    public boolean hasRequesttime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requesttime' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearRequesttime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setLatitude(double value) {
      validate(fields()[1], value);
      this.latitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearLatitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setLongitude(double value) {
      validate(fields()[2], value);
      this.longitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearLongitude() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'frequency' field.
      * @return The value.
      */
    public java.lang.Long getFrequency() {
      return frequency;
    }

    /**
      * Sets the value of the 'frequency' field.
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setFrequency(long value) {
      validate(fields()[3], value);
      this.frequency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'frequency' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearFrequency() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public java.lang.Long getVolume() {
      return volume;
    }

    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setVolume(long value) {
      validate(fields()[4], value);
      this.volume = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearVolume() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensor' field.
      * @return The value.
      */
    public java.lang.Long getSensor() {
      return sensor;
    }

    /**
      * Sets the value of the 'sensor' field.
      * @param value The value of 'sensor'.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder setSensor(long value) {
      validate(fields()[5], value);
      this.sensor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor' field has been set.
      * @return True if the 'sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sensor' field.
      * @return This builder.
      */
    public br.com.basis.hackathon.domain.avro.NoiseSensor.Builder clearSensor() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NoiseSensor build() {
      try {
        NoiseSensor record = new NoiseSensor();
        record.requesttime = fieldSetFlags()[0] ? this.requesttime : (java.lang.Long) defaultValue(fields()[0]);
        record.latitude = fieldSetFlags()[1] ? this.latitude : (java.lang.Double) defaultValue(fields()[1]);
        record.longitude = fieldSetFlags()[2] ? this.longitude : (java.lang.Double) defaultValue(fields()[2]);
        record.frequency = fieldSetFlags()[3] ? this.frequency : (java.lang.Long) defaultValue(fields()[3]);
        record.volume = fieldSetFlags()[4] ? this.volume : (java.lang.Long) defaultValue(fields()[4]);
        record.sensor = fieldSetFlags()[5] ? this.sensor : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NoiseSensor>
    WRITER$ = (org.apache.avro.io.DatumWriter<NoiseSensor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NoiseSensor>
    READER$ = (org.apache.avro.io.DatumReader<NoiseSensor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
